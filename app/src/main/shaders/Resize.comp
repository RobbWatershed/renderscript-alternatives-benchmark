/*
 *  Cascade Image Editor
 *
 *  Copyright (C) 2022 Till Dechent and contributors
 *
 *  This program is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program.  If not, see <https://www.gnu.org/licenses/>.
*/

#version 430

layout (local_size_x = 16, local_size_y = 16) in;
/*
layout (local_size_x_id = 0, local_size_y_id = 1) in;
*/

layout (binding = 0, rgba8) uniform readonly image2D inputImage;
layout (binding = 1, rgba8) uniform writeonly image2D outputImage;

layout (push_constant, std140) uniform PushConstant {
    float factorXY;
    float mode;
} sb;

float factorX = sb.factorXY;
float factorY = sb.factorXY;

vec4 cubicInterpolate(vec4 p[4], float x)
{
    return p[1] + 0.5 * x*(p[2] - p[0] + x*(2.0*p[0] - 5.0*p[1] + 4.0*p[2] - p[3] + x*(3.0*(p[1] - p[2]) + p[3] - p[0])));
}

vec4 bicubicInterpolate (vec4 p[4][4], float x, float y) {
    vec4 arr[4];
    arr[0] = cubicInterpolate(p[0], y);
    arr[1] = cubicInterpolate(p[1], y);
    arr[2] = cubicInterpolate(p[2], y);
    arr[3] = cubicInterpolate(p[3], y);
    return cubicInterpolate(arr, x);
}

void main()
{
    ivec2 pixelCoords = ivec2(gl_GlobalInvocationID.xy);

    ivec2 sourceCoords = ivec2(int(pixelCoords.x / factorX), int(pixelCoords.y / factorY));

    vec4 rgba = imageLoad(inputImage, pixelCoords).rgba;

    if (factorX != 1.0 || factorY != 1.0)
    {
        if (sb.mode == 0.0)
        {
            // Bicubic interpolation
            vec4 pixels[4][4];

            pixels[0][0] = imageLoad(inputImage, ivec2(sourceCoords.x + 0, sourceCoords.y + 0)).rgba;
            pixels[0][1] = imageLoad(inputImage, ivec2(sourceCoords.x + 0, sourceCoords.y + 1)).rgba;
            pixels[0][2] = imageLoad(inputImage, ivec2(sourceCoords.x + 0, sourceCoords.y + 2)).rgba;
            pixels[0][3] = imageLoad(inputImage, ivec2(sourceCoords.x + 0, sourceCoords.y + 3)).rgba;
            pixels[1][0] = imageLoad(inputImage, ivec2(sourceCoords.x + 1, sourceCoords.y + 0)).rgba;
            pixels[1][1] = imageLoad(inputImage, ivec2(sourceCoords.x + 1, sourceCoords.y + 1)).rgba;
            pixels[1][2] = imageLoad(inputImage, ivec2(sourceCoords.x + 1, sourceCoords.y + 2)).rgba;
            pixels[1][3] = imageLoad(inputImage, ivec2(sourceCoords.x + 1, sourceCoords.y + 3)).rgba;
            pixels[2][0] = imageLoad(inputImage, ivec2(sourceCoords.x + 2, sourceCoords.y + 0)).rgba;
            pixels[2][1] = imageLoad(inputImage, ivec2(sourceCoords.x + 2, sourceCoords.y + 1)).rgba;
            pixels[2][2] = imageLoad(inputImage, ivec2(sourceCoords.x + 2, sourceCoords.y + 2)).rgba;
            pixels[2][3] = imageLoad(inputImage, ivec2(sourceCoords.x + 2, sourceCoords.y + 3)).rgba;
            pixels[3][0] = imageLoad(inputImage, ivec2(sourceCoords.x + 3, sourceCoords.y + 0)).rgba;
            pixels[3][1] = imageLoad(inputImage, ivec2(sourceCoords.x + 3, sourceCoords.y + 1)).rgba;
            pixels[3][2] = imageLoad(inputImage, ivec2(sourceCoords.x + 3, sourceCoords.y + 2)).rgba;
            pixels[3][3] = imageLoad(inputImage, ivec2(sourceCoords.x + 3, sourceCoords.y + 3)).rgba;

            float x = gl_GlobalInvocationID.x / factorX - int(gl_GlobalInvocationID.x / factorX);
            float y = gl_GlobalInvocationID.y / factorY - int(gl_GlobalInvocationID.y / factorY);

            rgba = bicubicInterpolate(pixels, x, y);
        }
        else if (sb.mode == 1.0)
        {
            // Lanczos interpolation
            ivec2 centerCoordinate = ivec2(sourceCoords);
            ivec2 oneStepLeftCoordinate = ivec2(sourceCoords.x - 1, sourceCoords.y);
            ivec2 twoStepsLeftCoordinate = ivec2(sourceCoords.x - 2, sourceCoords.y);
            ivec2 threeStepsLeftCoordinate = ivec2(sourceCoords.x - 3, sourceCoords.y);
            ivec2 fourStepsLeftCoordinate = ivec2(sourceCoords.x - 4, sourceCoords.y);
            ivec2 oneStepRightCoordinate = ivec2(sourceCoords.x + 1, sourceCoords.y);
            ivec2 twoStepsRightCoordinate = ivec2(sourceCoords.x + 2, sourceCoords.y);
            ivec2 threeStepsRightCoordinate = ivec2(sourceCoords.x + 3, sourceCoords.y);
            ivec2 fourStepsRightCoordinate = ivec2(sourceCoords.x + 4, sourceCoords.y);

            rgba = imageLoad(inputImage, centerCoordinate).rgba * 0.38026;

            rgba += imageLoad(inputImage, oneStepLeftCoordinate).rgba * 0.27667;
            rgba += imageLoad(inputImage, oneStepRightCoordinate).rgba * 0.27667;

            rgba += imageLoad(inputImage, twoStepsLeftCoordinate).rgba * 0.08074;
            rgba += imageLoad(inputImage, twoStepsRightCoordinate).rgba * 0.08074;

            rgba += imageLoad(inputImage, threeStepsLeftCoordinate).rgba * -0.02612;
            rgba += imageLoad(inputImage, threeStepsRightCoordinate).rgba * -0.02612;

            rgba += imageLoad(inputImage, fourStepsLeftCoordinate).rgba * -0.02143;
            rgba += imageLoad(inputImage, fourStepsRightCoordinate).rgba * -0.02143;

            ivec2 oneStepUpCoordinate = ivec2(sourceCoords.x, sourceCoords.y - 1);
            ivec2 twoStepsUpCoordinate = ivec2(sourceCoords.x, sourceCoords.y - 2);
            ivec2 threeStepsUpCoordinate = ivec2(sourceCoords.x, sourceCoords.y - 3);
            ivec2 fourStepsUpCoordinate = ivec2(sourceCoords.x, sourceCoords.y - 4);
            ivec2 oneStepDownCoordinate = ivec2(sourceCoords.x, sourceCoords.y + 1);
            ivec2 twoStepsDownCoordinate = ivec2(sourceCoords.x, sourceCoords.y + 2);
            ivec2 threeStepsDownCoordinate = ivec2(sourceCoords.x, sourceCoords.y + 3);
            ivec2 fourStepsDownCoordinate = ivec2(sourceCoords.x, sourceCoords.y + 4);

            rgba += imageLoad(inputImage, centerCoordinate).rgba * 0.38026;

            rgba += imageLoad(inputImage, oneStepUpCoordinate).rgba * 0.27667;
            rgba += imageLoad(inputImage, oneStepDownCoordinate).rgba * 0.27667;

            rgba += imageLoad(inputImage, twoStepsUpCoordinate).rgba * 0.08074;
            rgba += imageLoad(inputImage, twoStepsDownCoordinate).rgba * 0.08074;

            rgba += imageLoad(inputImage, threeStepsUpCoordinate).rgba * -0.02612;
            rgba += imageLoad(inputImage, threeStepsDownCoordinate).rgba * -0.02612;

            rgba += imageLoad(inputImage, fourStepsUpCoordinate).rgba * -0.02143;
            rgba += imageLoad(inputImage, fourStepsDownCoordinate).rgba * -0.02143;

            rgba /= 2.0;
        }
        else if (sb.mode == 2.0)
        {
            // Bilinear interpolation
            vec2 texelSize = 1.0 / imageSize(inputImage);
            vec2 f = fract(sourceCoords * imageSize(inputImage));
            vec2 coords = sourceCoords + (.5 - f) * texelSize;
            vec4 tl = imageLoad(inputImage, ivec2(coords)).rgba;
            vec4 tr = imageLoad(inputImage, ivec2(coords + vec2(texelSize.x, 0.0))).rgba;
            vec4 bl = imageLoad(inputImage, ivec2(coords + vec2(0.0, texelSize.y))).rgba;
            vec4 br = imageLoad(inputImage, ivec2(coords + vec2(texelSize.x, texelSize.y))).rgba;
            vec4 tA = mix(tl, tr, f.x);
            vec4 tB = mix(bl, br, f.x);
            rgba = mix(tA, tB, f.y);
        }
        else if (sb.mode == 3.0)
        {
            // Nearest interpolation
            rgba = imageLoad(inputImage, ivec2(floor(pixelCoords.x / factorX), floor(pixelCoords.y / factorY)));
        }
    }

    imageStore(outputImage, pixelCoords, rgba);
}